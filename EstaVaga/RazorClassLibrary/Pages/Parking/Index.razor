@page "/Parking/Index"

@using RazorClassLibrary.Models.Base;
@using RazorClassLibrary.Models.DTOs.Parking;

@inject ApiService _apiService
@inject NavigationManager nav
@inject IJSRuntime JSRuntime

<PageTitle>Estacionamentos Solicitados</PageTitle>

<div class="row mb-3 text-center">
	<div class="col-lg-12">
		<h3>Estacionamentos Solicitados</h3>
	</div>
</div>
<div class="row">
	<div class="col-md-12">
		<div class="table-responsive-sm">
			<table class="table table-striped table-lighttable">
				<thead class="thead-dark">
					<tr>
						<th scope="col">Nome</th>
						<th scope="col">Endereço</th>
						<th scope="col">Complemento do Endereço</th>
						<th scope="col">Ações</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var parking in parkingList)
					{
						<tr>
							<td>
								<div><a href="#" @onclick="() => NavigateToParkingView(parking.Id)">@parking.Name</a></div>
								<div><small>@parking.Id</small></div>
							</td>
							<td>@string.Format("{0}, {1}", parking.Address, parking.AddressNumber)</td>
							<td>@parking.AddressComplement</td>
							<td>
								<button>
									<span class="oi oi-pencil" aria-hidden="true" @onclick="() => NavigateToParkingUpdate(parking.Id)"></span>
								</button>
								@*<button>
									<span class="oi oi-trash" aria-hidden="true" @onclick="() => NavigateToParkingRemove(parking.Id)"></span>
								</button>*@
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
		@if (message != null)
		{
			<div class="alert alert-secondary" role="alert">
				@message
			</div>
		}
	</div>
</div>

@code {
	List<ParkingBasicDTO> parkingList = new List<ParkingBasicDTO>();
	string message;

	protected override async Task OnInitializedAsync()
	{
		await GetAllParkings();
	}

	private async Task GetAllParkings()
	{
		try
		{
			var apiData = await _apiService.GetApiData("Parking/GetAll");
			parkingList = JsonConvert.DeserializeObject<List<ParkingBasicDTO>>(apiData);
		}
		catch (Exception)
		{
			message = "Não foi possível estabelecer uma comunicação.";
		}

		StateHasChanged();
	}

	private void NavigateToParkingView(Guid parkingId)
	{
		nav.NavigateTo("/Parking/View/" + parkingId);
	}

	private void NavigateToParkingUpdate(Guid parkingId)
	{
		nav.NavigateTo("/Parking/Update/" + parkingId);
	}

	private void NavigateToParkingRemove(Guid parkingId)
	{
		nav.NavigateTo("/Parking/Remove/" + parkingId);
	}
}